---
layout: post
title:  "服务质量可视化"
date:   2014-01-15 12:25:20
categories: 
---


## 背景

项目中需要对业务的各种质量指标进行监控，如接口的成功率，平均响应时间等。在实践中，经历过以下的一些做法：

1. 定时统计日志文件。好处是简单方便。坏处是实时性差，多机汇总也不方便。
1. 开发系统，让业务系统实时上报。好处是实时性提高，坏处是有不小的开发和维护工作量。
1. 使用开源工具搭建。目前已有不少成熟的框架。本文仅介绍自己的搭建的一个原型。

<br>
## 系统结构

<img src="{{ site.url }}/images/Feihu_Architecture.png" alt= "系统结构" style="width: 635px;"/>

### 子系统

* 上报端（Shipper）

  对本地日志分析进行分析，汇总后上报结果数据，避免对汇集端（Collector）的网络和存储产生过大的压力。

  主要包括[Logstash][]/Java/[Statsd][]/[Nodejs][]。

* 汇集端（Collector）

  负责记录来自各个上报端（Shipper）的上报，并负责展示。

  主要包括[Graphite][]/Python/Apache。

### 模块

* 日志（log）

  业务系统负责输出环节，日志可以是容器或反向代理（如Apache/Tomcat/Nginx等）的access日志，也可以是业务代码通过日志系统（如SLF4J等）输出的有规则的日志。

* [Logstash][]

  负责采集日志，分析并上报到本地的[Statsd][]，它会监视配置好的日志，一旦有增加即会进行分析并上报。

* [Statsd][]

  负责接收本地[Logstash][]的上报，在本地进行汇总，按设定的间隔时间（默认10秒）上报到汇集端的[Graphite][]（实际接收模块为carbon）

* [Graphite][] （Carbon/Whisper/Graphite-Web）

  Carbon负责接收多台机器的上报，将信息按时间片存于whisper中，Graphite Web端用于展示数据

* Dashboard

  业务关心的数据需要提取并作较好的展现，简单的做法是使用Graphite自己的Dashboard，但需要定制时最好还是自己开发。

## 系统效果

<img src="{{ site.url }}/images/Feihu_Dashboard.png" alt= "系统效果" style="width: 635px;"/>

上图是一个实际运行的系统，接口总的平均响应时间和八台机器单独的平均响应时间。

## 系统搭建

写了简单的搭建脚本，请参考[这里](http://github.com/ouyzhu/feihu)

## 其它参考

* [来自Flicker的经验](http://code.flickr.net/2008/10/27/counting-timing/)
* [其它人的经验](http://matt.aimonetti.net/posts/2013/06/26/practical-guide-to-graphite-monitoring/)


[Logstash]: http://logstash.net/
[Statsd]: https://github.com/etsy/statsd/
[Nodejs]: http://nodejs.org/
[Graphite]: http://graphite.wikidot.com/

